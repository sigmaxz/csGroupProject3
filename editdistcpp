#include <string>
#include <iostream>

using namespace std;

string r = "AACCTGACATCTT";
string q = "CCAGCGTCAACTT";

//string r = "AACCTGAC";
//string q = "CCAGCGTC";

//string r = "AGCT"; //reference sequence
//string q = "ACGT";   //query sequence 

const int size_r = 14; //include extra space for gap
const int size_q = 14;

double v[5][5]; //Matrix/2D array of similarity score
double M[(size_r+1)*2][(size_q+1)*2]; //Matrix/2D array of edit-distance scores

/*
similarity score matrix
  | - | A | G | C | T
--|---|---|---|---|---
- |   |   |   |   |
--|---|---|---|---|---
A |   |   |   |   |
--|---|---|---|---|---
G |   |   |   |   |
--|---|---|---|---|---
C |   |   |   |   |
--|---|---|---|---|---
T |   |   |   |   |
*/


void init()
{
	v[0][0] = -0.2;    v[0][1] = -0.2;  v[0][2] = -0.2;  v[0][3] = -0.2;  v[0][4] = -0.2;
	v[1][0] = -0.2;    v[1][1] = 1;     v[1][2] = -0.1;  v[1][3] = -0.1;  v[1][4] = -0.15;
	v[2][0] = -0.2;    v[2][1] = -0.1;  v[2][2] = 1;     v[2][3] = -0.15; v[2][4] = -0.1;
	v[3][0] = -0.2;    v[3][1] = -0.1;  v[3][2] = -0.15; v[3][3] = 1;     v[3][4] = -0.1;	
	v[4][0] = -0.2;    v[4][1] = -0.15; v[4][2] = -0.1;  v[4][3] = -0.1;  v[4][4] = 1;		
}

void printSimScore()
{
	for(int x = 0; x < 5 ; ++x)
	{
		for(int y = 0; y < 5; ++y)
		{
			cout << v[x][y] << '\t';
		}
		cout << endl;
	}
}

void printEditDistMatrix()
{
	for(int i = 0; i < (size_r+1)*2; ++i)
	{
		for(int j = 0; j < (size_q+1)*2; ++j)
		{
			cout << M[i][j] << '\t';
		}
		cout << endl;
	}
}


//converts DNA letter in string to appropriate int value;
//isreference_file is true if the string is part of the reference file
	//and false if it is the query file
int L(bool isreference_file, int index)
{	
	if(!isreference_file)
	{
		switch(r[index])
		{
		case 'A':
			return 1;
			break;
		case 'G':
			return 2;
			break;
		case 'C':
			return 3;
			break;
		case 'T':
			return 4;
			break;
		default:
			string tmp = isreference_file ? "true" : "false";
			cerr << "Invalid string   " << tmp << "  " << index<< endl;
			exit(0);
		}
	}
	else
	{
		switch(q[index])
		{
		case 'A':
			return 1;
			break;
		case 'G':
			return 2;
			break;
		case 'C':
			return 3;
			break;
		case 'T':
			return 4;
			break;
		default:
			string tmp = isreference_file ? "true" : "false";
			cerr << "Invalid string   " << tmp << "  " << index<< endl;
			exit(0);
		}
	}	
}

double max(double x, double y, double z)
{
	double m = x;
	if(y > m)
		m = y;
	if(z > m)
		m = z;
	return m;
}


void maxScore()
{
	int size_a = q.size();
	int size_b = r.size();

	for(int i = 0; i < size_a; ++i)
	{
		M[i][0] = v[i][0] * i;
	}

	for(int j = 0; j < size_b; ++j)
	{
		M[0][j] = v[0][j] * j;
	}
	
	for(int i = 1; i < size_a; ++i)
	{
		for(int j = 0; j < size_b; ++j)
		{
			double same_letter = M[i-1][j-1] + v[ L(0,i) ][ L(1,j) ];
			double deletion    = M[i-1][j]   + v[0][ L(1,j) ];
			double insertion   = M[i][j-1]   + v[ L(0,i) ][0];

			M[i][j] = max(same_letter, deletion, insertion);
		}
	}
	
}

double findLargestScore()
{
	//find the strings of longest sequence
	string A = "";
	string B = "";
	int i = q.size()-1;
	int j = r.size()-1;

	while(i > 0 || j > 0)
	{
		if(i > 0 && j > 0 && M[i-1][j-1] + v[ L(1,i) ][ L(0,j) ] == M[i][j] )
		{
			A+=q[i];
			B+=r[j];
			--i;
			--j;
		}
		else if(i > 0 && M[i][j] == M[i-1][j] + v[i][0])
		{
			A+= r[i];
			B+= '_';
			--i;
		}
		else //if(j > 0 && M[i][j] == M[i][j-1] + v[0][j])
		{
			A+='_';
			B+=r[j];
			--j;
		}		
		//else
		{

		}
	}

	cout << "reference string : " << A << endl;
	cout << "query string     : " << B << endl;

	//find the largest number.
	double highestscore = -9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.0; 
	for(int x = 0; x < (size_r+1)*2; ++x)
		{
			for(int y = 0; y < (size_q+1)*2; ++y)
			{	
				if(M[x][y] > highestscore)
					highestscore = M[x][y];
			}
		}
	return highestscore;
}


int main()
{
	init();
	cout << endl;
	cout << "similiarty score matrix" << endl;
	printSimScore();
	cout << endl;
	maxScore();
	printEditDistMatrix();
	cout << "Score : " << findLargestScore() << endl;
	
return 0;
}


