#include <string>
#include <iostream>

using namespace std;

string r = "AAACCCGGGTAAACCCGGGTAAACCCGGGTAAACCCGGGTAAACCCGGGTAAACCCGGGTAAACCCGGGTAAACCCGGGTAAACCCGGGTAAACCCGGGT";
string q =	"GGTAAACCCGGGTAAACCCTGGTAAACCCTGGTAAACCCTGGTAAACCCTGGTAAACCCTGGTAAACCCTGGTAAACCCTGGTAAACCCT";

const int size_r = 100;
const int size_q = 90;

//string r = "AACCTGACATCTT";
//string q = "CCAGCGTCAACTT";

//string r = "AACCTGAC";
//string q = "CCAGCGTC";

//string r = "AGCT"; //reference sequence
//string q = "ACGT";   //query sequence 

//const int size_r = 13;
//const int size_q = 13;

double v[5][5]; //Matrix/2D array of similarity score
double M[(size_r+1)][(size_q+1)]; //Matrix/2D array of edit-distance scores

/*
similarity score matrix
  | - | A | G | C | T
--|---|---|---|---|---
- |   |   |   |   |
--|---|---|---|---|---
A |   |   |   |   |
--|---|---|---|---|---
G |   |   |   |   |
--|---|---|---|---|---
C |   |   |   |   |
--|---|---|---|---|---
T |   |   |   |   |
*/


void init()
{
	v[0][0] = -0.2;    v[0][1] = -0.2;  v[0][2] = -0.2;  v[0][3] = -0.2;  v[0][4] = -0.2;
	v[1][0] = -0.2;    v[1][1] = 1;     v[1][2] = -0.1;  v[1][3] = -0.1;  v[1][4] = -0.15;
	v[2][0] = -0.2;    v[2][1] = -0.1;  v[2][2] = 1;     v[2][3] = -0.15; v[2][4] = -0.1;
	v[3][0] = -0.2;    v[3][1] = -0.1;  v[3][2] = -0.15; v[3][3] = 1;     v[3][4] = -0.1;	
	v[4][0] = -0.2;    v[4][1] = -0.15; v[4][2] = -0.1;  v[4][3] = -0.1;  v[4][4] = 1;		
}

void printSimScore()
{
	for(int x = 0; x < 5 ; ++x)
	{
		for(int y = 0; y < 5; ++y)
		{
			cout << v[x][y] << '\t';
		}
		cout << endl;
	}
}

void printEditDistMatrix()
{
	for(int i = 0; i < (size_r+1); ++i)
	{
		for(int j = 0; j < (size_q+1); ++j)
		{
			cout << M[i][j] << '\t';
		}
		cout << endl << endl;
	}
}


//converts DNA letter in string to appropriate int value;
//isreference_file is true if the string is part of the reference file
	//and false if it is the query file
int L(bool isreference_file, int index)
{	
	if(!isreference_file)
	{
		switch(r[index])
		{
		case 'A':
			return 1;
			break;
		case 'G':
			return 2;
			break;
		case 'C':
			return 3;
			break;
		case 'T':
			return 4;
			break;
		default:
			string tmp = isreference_file ? "true" : "false";
			cerr << "Invalid string   " << tmp << "  " << index<< endl;
			exit(0);
		}
	}
	else
	{
		switch(q[index])
		{
		case 'A':
			return 1;
			break;
		case 'G':
			return 2;
			break;
		case 'C':
			return 3;
			break;
		case 'T':
			return 4;
			break;
		default:
			string tmp = isreference_file ? "true" : "false";
			cerr << "Invalid string   " << tmp << "  " << index<< endl;
			exit(0);
		}
	}	
}

//double max(double x, double y, double z)
//{
//	double m = x;
//	if(y > m)
//		m = y;
//	if(z > m)
//		m = z;
//	return m;
//}


void bestSequence()
{
	//int size_q = q.size();
	//int size_r = r.size();

	double M_down[size_q][size_r];
	double M_right[size_q][size_r];
	bool M_gap[size_q][size_r];

	double gi = 0.2;  //Penalty for introducing a gap
	double gc = 0.05; //Penalty for each additional gap added.
	//bool prev_was_gap = false; //flag indicating if the previous column was a gap;

	for(int i = 0; i < size_q; ++i)
	{
		M[i][0] = 0;
		M_down[i][0] = 0;
		M_right[i][0] = 0;
		M_gap[i][0] = false;
	}

	for(int j = 0; j < size_r; ++j)
	{
		M[0][j] = 0;
		M_down[0][j] = 0;
		M_right[0][j] = 0;
		M_gap[0][j] = false;
	}
	double down = 0;
	double right = 0;

	for(int i = 1; i < size_q; ++i)
	{
		for(int j = 1; j < size_r; ++j)
		{
			down = 0;
			if(M_gap[i-1][j] == true)
				down = M_down[i-1][j] - gc;
			else
				down = M[i-1][j] - gi;
			//M_down[i][j] = down_1 > down_2 ? down_1 : down_2;

			right = 0;
			if(M_gap[i][j-1] == true)
				right = M_right[i][j-1] - gc;
			else
				right = M[i][j-1] - gi;
			//M_right[i][j] = right_1 > right_2 ? right_1 : right_2;

			double m_1 = M[i-1][j-1] + v[ L(true, i)][ L(false, j)];
			double m_2 = M_down[i][j];
			double m_3 = M_right[i][j];
			//double tmp = m_2 > m_3 ? m_2 : m_3;
			//M[i][j] = m_1 > tmp ? m_1 : tmp; 
			if(m_1 > m_2 && m_1 > m_3)
			{
				M[i][j] = m_1;
				M_gap[i][j] = false;
			}
			else if(m_2 > m_1 && m_2 > m_3)
			{
				M[i][j] = m_2;
				M_gap[i][j] = true;
			}
			else 
			{
				M[i][j] = m_3;
				M_gap[i][j] = true;
			}
		}
	}
}

double findHightestScore()
{
	int tsize_r = r.size();
	int tsize_q = q.size();
	double highestscore = -9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.0; 
	for(int i = 1; i < tsize_r; ++i)
	{
		for(int j = 1; j < tsize_q; ++j)
		{
			if(M[i][j] > highestscore)
				highestscore = M[i][j];
		}
	}
	return highestscore;
}

void findLongestString()
{
	//find the strings of longest sequence
	string A = "";
	string B = "";
	int i = q.size()-1;
	int j = r.size()-1;

	while(i > 0 || j > 0)
	{
		if(i > 0 && j > 0 && M[i-1][j-1] + v[ L(1,i) ][ L(0,j) ] == M[i][j] )
		{
			A+=q[i];
			B+=r[j];
			--i;
			--j;
		}
		else if(i > 0 && M[i][j] == M[i-1][j] + v[i][0])
		{
			A+= r[i];
			B+= '_';
			--i;
		}
		else //if(j > 0 && M[i][j] == M[i][j-1] + v[0][j])
		{
			A+='_';
			B+=r[j];
			--j;
		}		
	}
	cout << "ref   : " << A << endl;
	cout << "query : " << B << endl;
}


int main()
{	

	init();
	cout << endl;
	cout << "similiarty score matrix" << endl;
	//printSimScore();
	cout << endl;
	bestSequence();
	//printEditDistMatrix();
	cout << endl << "Highest score " << findHightestScore() << endl;
	findLongestString();
	
return 0;
}



